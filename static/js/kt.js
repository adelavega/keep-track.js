// Generated by CoffeeScript 1.6.3
(function() {
  var Block, InstGrid, Instruction, PracBlock, Session, Word, all_cats, categories, clearGrid, closeGrid, fillGrid, hideButtons, instructions, keyText, real_stim, stim, stimLength,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  instructions = ["In this task, you'll see one word at a time from various categories.<br><br>Your job will be to remember the last word from some of those categories. <br><br>Let's see how it works!", "The words you'll see belong to six categories.<br>Take a second to familiarize yourself with them. ", "You'll be told which categories to pay attention to before you see any words. The categories will stay on the screen, so don't worry about memorizing them. <br><br>For example, you may be asked to keep track of only words that are <strong>animals</strong>.<br><br>In this case, you'll want to ignore words from other categories, like <i>countries<i> or <i>metals</i>.", "Above the categories you'll see one word at a time for two seconds each.<br><br>For example, you might see the word 'Tiger' followed by 'Yard' and then 'Horse'. <br><br>If you were asked to keep track of <strong>animals</strong>, the correct answer would be 'Horse', because it was the last animal word we showed you.", "Let's see a short example!<br><br>You'll see six words in a row.<br><br>	Keep track of only words that are <strong>animals</strong>. <br><br>Ignore words from other categories.<br><br>", "The last Animal word was 'Cat'.  <br><br>Is that what you saw?<br><br> If you are confused watch that again, otherwise let's learn how to input your responses.", "You'll see a grid with all of the possible words in the categories you were asked to keep track of, like this:<br><br><br><br><br>To respond, just click on the word you thought was the last of each category. ", "Try entering, 'Cat', the correct answer of the example", "Good job.<br><br>Let's do a longer example, this time with two categories.<br><br>Remember to pay attention to the categories and only keep track of the <i>last</i> item from each category", "Great! You're done with the practice. <br><br>We're now going to show you 14 more lists<br><br>You will be asked to keep track of 3 or 4 categories. Pay a lot of attention, this task can get fairly difficult!"];

  hideButtons = function() {
    $("#leftButton").hide();
    return $("#rightButton").hide();
  };

  keyText = function(text, key) {
    if (key === 'left') {
      $("#leftText").html(text);
      return $("#leftButton").show();
    } else {
      $("#rightText").html(text);
      return $("#rightButton").show();
    }
  };

  fillGrid = function(cats) {
    var cat, cdiv, filt, i, x, _i, _len, _results;
    clearGrid();
    $('.btn-group').parent().addClass('hidden');
    $('#responses').show().removeClass('hidden');
    i = 1;
    _results = [];
    for (_i = 0, _len = cats.length; _i < _len; _i++) {
      cat = cats[_i];
      cdiv = "#c" + i.toString();
      filt = cdiv + ' > button';
      $(cdiv).parent().removeClass('hidden');
      $(cdiv).prev().html(cat + "&nbsp&nbsp");
      x = 0;
      $(filt).each(function() {
        $(this).html(categories[cat][x]);
        return x = x + 1;
      });
      _results.push(i = i + 1);
    }
    return _results;
  };

  closeGrid = function(func) {
    var _this = this;
    $('#responses').fadeOut();
    return setTimeout((function() {
      return func();
    }), 500);
  };

  clearGrid = function() {
    return $('.resp').removeClass('btn-primary');
  };

  stim = {
    "pracLists": [[["Animals"], ["Cat"], ["Horse", "Mile", "Steel", "Cat", "Green", "Aunt"]], [["Metals", "Countries"], ["Steel", "Mexico"], ["Red", "Blue", "Tin", "Cow", "Yellow", "England", "Lion", "Meter", "Inch", "Mexico", "Black", "Brother", "Green", "Cat", "Yard", "Aunt", "Uncle", "Steel", "Horse", "Father"]]]
  };

  real_stim = [[["Distances", "Animals", "Countries"], ["Mile", "Cat", "France"], ["Cow", "Germany", "Zinc", "Blue", "Canada", "Mile", "Mother", "Father", "Cat", "Uncle", "Orange", "Sister", "France", "Copper", "Aunt"]], [["Colors", "Metals", "Relatives", "Distances"], ["Black", "Steel", "Father", "Centimeter"], ["Sister", "Brother", "Lion", "Canada", "Meter", "Germany", "Iron", "France", "Foot", "Father", "Black", "Centimeter", "Dog", "Steel", "Horse"]], [["Animals", "Countries", "Colors", "Metals"], ["Tiger", "Mexico", "Blue", "Tin"], ["Yellow", "Mile", "England", "Red", "Sister", "Tiger", "Inch", "Tin", "Mexico", "Centimeter", "Meter", "Yard", "Foot", "Blue", "Father"]], [["Relatives", "Distances", "Animals"], ["Aunt", "Inch", "Lion"], ["Dog", "Platinum", "Iron", "Horse", "Russia", "Aunt", "Green", "Yard", "Inch", "Lion", "Tin", "Yellow", "Steel", "Red", "England"]], [["Countries", "Colors", "Metals"], ["Russia", "Orange", "Platinum"], ["Brother", "Zinc", "Green", "Russia", "Copper", "Horse", "Centimeter", "Platinum", "Tiger", "Meter", "Cat", "Mile", "Orange", "Aunt", "Lion"]], [["Relatives", "Distances", "Animals"], ["Uncle", "Mile", "Cow"], ["Tin", "Foot", "Black", "England", "Uncle", "Red", "Mile", "Mexico", "Lion", "Yellow", "Tiger", "Cow", "Steel", "Orange", "Russia"]], [["Countries", "Colors", "Metals", "Relatives"], ["Germany", "Blue", "Zinc", "Mother"], ["Tin", "Yellow", "Foot", "Germany", "Aunt", "Sister", "Cow", "Tiger", "Lion", "Mother", "Blue", "Iron", "Zinc", "Dog", "Inch"]]];

  categories = {
    "Animals": ["Dog", "Cat", "Tiger", "Horse", "Lion", "Cow"],
    "Relatives": ["Sister", "Mother", "Brother", "Aunt", "Father", "Uncle"],
    "Distances": ["Mile", "Centimeter", "Inch", "Foot", "Meter", "Yard"],
    "Countries": ["Germany", "Russia", "Canada", "France", "England", "Mexico"],
    "Metals": ["Zinc", "Tin", "Steel", "Iron", "Copper", "Platinum"],
    "Colors": ["Red", "Green", "Blue", "Yellow", "Black", "Orange"]
  };

  all_cats = ['Distances', 'Relatives', 'Animals', 'Countries', 'Metals', 'Colors'];

  stimLength = 2000;

  Session = (function() {
    function Session(blocks) {
      this.blocks = blocks;
      hideButtons();
      this.blockNumber = 0;
      this.max_blocks = this.blocks.length;
      this.imgs_loaded = 0;
    }

    Session.prototype.start = function() {
      psiTurk.finishInstructions();
      this.imgs_loaded++;
      if (this.imgs_loaded === 2) {
        return this.nextBlock();
      }
    };

    Session.prototype.nextBlock = function() {
      var _this = this;
      this.currBlock = this.blocks[this.blockNumber];
      if (this.blockNumber >= this.max_blocks) {
        return this.endSession();
      } else {
        this.blockNumber++;
        $('.tasktext').html(' ');
        return this.currBlock.start((function(arg1) {
          return _this.exitBlock(arg1);
        }));
      }
    };

    Session.prototype.prevBlock = function() {
      var _this = this;
      if (this.blockNumber > 1) {
        this.blockNumber = this.blockNumber - 2;
      }
      this.currBlock = this.blocks[this.blockNumber];
      this.blockNumber++;
      return this.currBlock.start((function(arg1) {
        return _this.exitBlock(arg1);
      }));
    };

    Session.prototype.exitBlock = function(next) {
      if (next == null) {
        next = true;
      }
      if (next) {
        return this.nextBlock();
      } else {
        return this.prevBlock();
      }
    };

    Session.prototype.endSession = function() {
      return psiTurk.completeHIT();
    };

    Session.prototype.buttonClick = function(e) {
      return this.currBlock.buttonClick(e);
    };

    return Session;

  })();

  Instruction = (function() {
    function Instruction(message, leftKey, rightKey, corrResp) {
      this.message = message;
      this.leftKey = leftKey != null ? leftKey : null;
      this.rightKey = rightKey != null ? rightKey : "Continue";
      this.corrResp = corrResp != null ? corrResp : null;
    }

    Instruction.prototype.start = function(exitTrial) {
      this.exitTrial = exitTrial;
      this.startTime = (new Date).getTime();
      $('#inst').html(this.message);
      $('#inst').show();
      hideButtons();
      if (this.leftKey != null) {
        keyText(this.leftKey, 'left');
      }
      return keyText(this.rightKey, 'right');
    };

    Instruction.prototype.buttonClick = function(button) {
      var acc, rt,
        _this = this;
      rt = (new Date).getTime() - this.startTime;
      if (this.corrResp != null) {
        if (this.corrResp === button) {
          $('#correct').modal('show');
          setTimeout((function() {
            return $('#correct').modal('hide');
          }), 1250);
          setTimeout((function() {
            return _this.exitTrial();
          }), 1250);
          acc = 1;
        } else {
          $('#error').modal('show');
          setTimeout((function() {
            return $('#error').modal('hide');
          }), 1250);
          acc = 0;
        }
      } else {
        if (button.id === 'leftText' || button.id === 'leftButton') {
          acc = 'BACK';
          this.exitTrial(false);
        } else if (button.id === 'rightText' || button.id === 'rightButton') {
          acc = 'FORWARD';
          this.exitTrial();
        }
      }
      return psiTurk.recordTrialData({
        'block': this.message,
        'rt': rt,
        'resp': button,
        'acc': acc
      });
    };

    return Instruction;

  })();

  InstGrid = (function() {
    function InstGrid(message, categories, disabled, correct, leftKey, rightKey) {
      this.message = message;
      this.categories = categories != null ? categories : all_cats;
      this.disabled = disabled != null ? disabled : true;
      this.correct = correct != null ? correct : false;
      this.leftKey = leftKey != null ? leftKey : "Back";
      this.rightKey = rightKey != null ? rightKey : "Continue";
      this.maxClicks = this.correct.length;
      console.log(this.correct.length);
    }

    InstGrid.prototype.start = function(exitTrial) {
      this.exitTrial = exitTrial;
      fillGrid(this.categories);
      $('#inst').html(this.message);
      $('#inst').show();
      hideButtons();
      if (this.leftKey) {
        console.log(this.leftKey);
        keyText(this.leftKey, 'left');
      }
      if (this.rightKey) {
        keyText(this.rightKey, 'right');
      }
      if (this.correct !== false) {
        keyText('Submit', 'right');
        $('#rightButton').addClass('disabled');
        return $('#rightButton').removeClass('btn-success');
      }
    };

    InstGrid.prototype.reset = function() {
      return clearGrid();
    };

    InstGrid.prototype.buttonClick = function(button) {
      if (button.id === 'leftText' || button.id === 'leftButton') {
        return closeGrid(this.exitTrial(false));
      } else if (button.id === 'rightText' || button.id === 'rightButton') {
        if (!this.correct) {
          return closeGrid(this.exitTrial);
        } else {
          return this.checkResponses();
        }
      } else {
        if (!this.disabled) {
          $(button).siblings().removeClass('btn-primary');
          $(button).toggleClass('btn-primary');
          if ($('.resp.btn-primary').length === this.maxClicks) {
            $('#rightButton').removeClass('disabled');
            return $('#rightButton').addClass('btn-success');
          } else if ($('.resp.btn-primary').length !== this.maxClicks) {
            $('#rightButton').addClass('disabled');
            return $('#rightButton').removeClass('btn-success');
          }
        }
      }
    };

    InstGrid.prototype.checkResponses = function() {
      var allCorr, resp, responses, _i, _len,
        _this = this;
      responses = $('.resp.btn-primary').map(function() {
        return $(this).text();
      }).get();
      allCorr = true;
      for (_i = 0, _len = responses.length; _i < _len; _i++) {
        resp = responses[_i];
        if (__indexOf.call(this.correct, resp) >= 0 === false) {
          allCorr = false;
        }
      }
      if (allCorr) {
        closeGrid(this.exitTrial);
        $('#correct').modal('show');
        return setTimeout((function() {
          return $('#correct').modal('hide');
        }), 1250);
      } else {
        return this.showError();
      }
    };

    InstGrid.prototype.showError = function() {
      var _this = this;
      $('#error').modal('show');
      return setTimeout((function() {
        return $('#error').modal('hide');
      }), 1250);
    };

    return InstGrid;

  })();

  Block = (function() {
    function Block(condition, message, trial_structure) {
      var word;
      this.condition = condition;
      this.message = message;
      this.trialNumber = 0;
      this.categories = trial_structure[0];
      this.target_words = trial_structure[1];
      this.words = (function() {
        var _i, _len, _ref, _results;
        _ref = trial_structure[2];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          word = _ref[_i];
          _results.push(new Word(word, 2000));
        }
        return _results;
      })();
      this.max_trials = this.words.length;
      this.catText = this.categories.join("&nbsp&nbsp");
    }

    Block.prototype.start = function(exitBlock) {
      var _this = this;
      this.exitBlock = exitBlock;
      hideButtons();
      $('#topText').html(this.message);
      return setTimeout((function() {
        $('#topText').html(" ");
        $('#bottomText').html(_this.catText);
        return setTimeout((function() {
          return _this.nextTrial();
        }), stimLength);
      }), stimLength);
    };

    Block.prototype.nextTrial = function() {
      var _this = this;
      this.currTrial = this.words[this.trialNumber];
      if (this.trialNumber >= this.max_trials) {
        this.trialNumber++;
        return this.getResponses();
      } else {
        this.trialNumber++;
        return this.currTrial.show((function() {
          return _this.nextTrial();
        }));
      }
    };

    Block.prototype.getResponses = function() {
      $('#bottomText').html(" ");
      $('#topText').html(" ");
      $('#inst').html("Please enter the last word of each category");
      keyText('Submit', 'right');
      fillGrid(this.categories);
      this.maxClicks = this.categories.length;
      $('#rightButton').addClass('disabled');
      return $('#rightButton').removeClass('btn-success');
    };

    Block.prototype.buttonClick = function(button) {
      if (button.id === 'rightText' || button.id === 'rightButton') {
        closeGrid(this.exitBlock);
        return psiTurk.recordTrialData({
          'block': this.condition,
          'target_words': this.target_words,
          'input_words': this.data
        });
      } else {
        $(button).siblings().removeClass('btn-primary');
        $(button).toggleClass('btn-primary');
        console.log(this.maxClicks);
        if ($('.resp.btn-primary').length === this.maxClicks) {
          $('#rightButton').removeClass('disabled');
          return $('#rightButton').addClass('btn-success');
        } else if ($('.resp.btn-primary').length !== this.maxClicks) {
          $('#rightButton').addClass('disabled');
          return $('#rightButton').removeClass('btn-success');
        }
      }
    };

    return Block;

  })();

  PracBlock = (function(_super) {
    __extends(PracBlock, _super);

    function PracBlock(condition, message, trial_structure, speed) {
      var word;
      this.condition = condition;
      this.message = message;
      if (speed == null) {
        speed = 3500;
      }
      PracBlock.__super__.constructor.call(this, this.condition, this.message, trial_structure);
      this.words = (function() {
        var _i, _len, _ref, _results;
        _ref = trial_structure[2];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          word = _ref[_i];
          _results.push(new Word(word, speed));
        }
        return _results;
      })();
    }

    PracBlock.prototype.getResponses = function() {
      $('#bottomText').html(" ");
      $('#topText').html(" ");
      return this.exitBlock();
    };

    return PracBlock;

  })(Block);

  Word = (function() {
    function Word(word, stimLength) {
      this.word = word;
      this.stimLength = stimLength != null ? stimLength : stimLength;
    }

    Word.prototype.show = function(exitTrial) {
      var _this = this;
      this.exitTrial = exitTrial;
      $('#topText').html(this.word);
      return setTimeout((function() {
        return _this.exitTrial();
      }), this.stimLength);
    };

    return Word;

  })();

  this.kTrack = {
    Session: Session,
    Instruction: Instruction,
    InstGrid: InstGrid,
    Block: Block,
    PracBlock: PracBlock,
    Word: Word,
    instructions: instructions,
    stim: stim,
    all_cats: all_cats,
    real_stim: real_stim
  };

}).call(this);
